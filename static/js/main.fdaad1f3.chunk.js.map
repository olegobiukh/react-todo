{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","deleteItem","id","newItems","state","items","filter","item","setState","activeItems","completed","length","getfiltered","word","console","log","editId","toggleCompleted","isCompleted","allCompleted","updateItems","map","itemValue","clearCompleted","editItem","text","onEditItem","event","target","value","handleEditItem","preventDefault","forEach","handleChange","bind","addItem","this","newItem","num","index","Fragment","className","onSubmit","onClick","type","onChange","placeholder","key","checked","handleChangeCheckbox","onDoubleClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdaad1f3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: 0,\n            value: '',\n            items: [],\n            activeItems: 0,\n            filter: 'all',\n            allCompleted: false,\n            editId: -1,\n            itemValue: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.addItem = this.addItem.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    addItem(event) {\n        event.preventDefault();\n        if (this.state.value) {\n            let newItem = {\n                id: this.state.id,\n                text: this.state.value,\n                completed: false,\n            };\n\n            this.setState(({items}) => {\n                return {\n                    items: [...items, newItem],\n                    value: \"\",\n                    id: this.state.id + 1,\n                    activeItems: [...items, newItem].filter(item => !item.completed).length,\n                    itemValue: ''\n                };\n            });\n        }\n    }\n\n    handleChangeCheckbox(id) {\n        const updateItems = [...this.state.items];\n        let num = 0;\n        updateItems.forEach((item, index) => {\n            if (item.id === id) {\n                num = index\n            }\n        });\n\n        updateItems[num].completed = !updateItems[num].completed;\n\n        this.setState({\n            items: updateItems,\n            activeItems: updateItems.filter(item => !item.completed).length\n        });\n    }\n\n    deleteItem = id => {\n        const updateItems = [...this.state.items];\n        const newItems = updateItems.filter(item => item.id !== id);\n\n        this.setState({\n            items: newItems,\n            activeItems: newItems.filter(item => !item.completed).length\n        });\n    }\n\n    getfiltered = word => {\n        console.log(word)\n        switch (word) {\n            case 'all':\n                this.setState({filter: 'all', editId: -1})\n                break;\n            case 'active':\n                this.setState({filter: 'active', editId: -1})\n                break;\n            case 'completed':\n                this.setState({filter: 'completed', editId: -1})\n                break;\n        }\n    }\n\n    toggleCompleted = () => {\n        let isCompleted = this.state.allCompleted;\n        const updateItems = [...this.state.items]\n        if (this.state.allCompleted) {\n            updateItems.map(item => item.completed = true)\n        } else {\n            updateItems.map(item => item.completed = false)\n        }\n\n        this.setState({\n            items: updateItems,\n            allCompleted: !isCompleted,\n            itemValue: ''\n        })\n    }\n\n    clearCompleted = () => {\n        this.setState(({items}) => {\n            const activeItems = this.state.items.filter(item => !item.completed);\n            return {\n                items: activeItems,\n                activeItems: activeItems.length,\n                itemValue: '',\n                filter: 'all'\n            }\n        })\n    }\n\n    editItem = ({id, text}) => {\n        console.log(id)\n        this.setState({editId: id, itemValue: text})\n    }\n\n    onEditItem = (event) => {\n        this.setState({itemValue: event.target.value});\n    }\n\n    handleEditItem = (event) => {\n        event.preventDefault();\n        const updateItems = [...this.state.items]\n        updateItems.forEach(item => {\n            if (item.id === this.state.editId) {\n                item.text = this.state.itemValue;\n            }\n        })\n        this.setState({items: updateItems, itemValue: '', editId: -1});\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"app\">\n                    <h1 className=\"app__title\">todos</h1>\n                    <form onSubmit={this.addItem} className=\"app__form1\">\n                        <i onClick={this.toggleCompleted} className={this.state.items.length > 0 && this.state.allCompleted ? \"fas fa-chevron-down app__arrow\" : \"fas fa-chevron-down app__arrow uncompleted\"}></i>\n                        <input type=\"text\" className=\"app__field app__field1--pl\" value={this.state.value}\n                               onChange={this.handleChange} placeholder=\"What needs to be done?\"/>\n                    </form>\n                    <ul className=\"items\">\n                        {\n                            this.state.items.map(item =>\n                                <li key={item.id} className={\n                                    this.state.filter === 'active' && item.completed === false || this.state.filter === 'all' || this.state.filter === 'completed' && item.completed === true\n                                        ? \"display-block\"\n                                        : \"display-none\"\n                                }>\n                                    <form onSubmit={this.handleEditItem}\n                                          className={this.state.itemValue && this.state.editId === item.id ? \"display-block\" : \"display-none\"}>\n                                        <input type=\"text\" value={this.state.itemValue}\n                                               onChange={this.onEditItem} className=\"app__field p-16\"/>\n                                    </form>\n                                    <div className={this.state.editId !== item.id ? \"display-block p-16 item\"\n                                        : \"display-none\"}>\n                                        <input type=\"checkbox\" checked={item.completed}\n                                               onChange={() => this.handleChangeCheckbox(item.id)}/>\n                                        <span className={\n                                            item.completed\n                                                ? \"completed item__text\"\n                                                : \"uncompleted item__text\"\n                                        }\n                                              onDoubleClick={() => this.editItem(item)}\n                                        >\n                                    {item.text}\n                                </span>\n                                        <button type=\"button\" className=\"close\"\n                                                onClick={() => this.deleteItem(item.id)}>x\n                                        </button>\n                                    </div>\n\n                                </li>\n                            )\n                        }\n                    </ul>\n                    <div\n                        className={this.state.items.length === 0 ? 'display-none' : 'display-block toolbar'}>{this.state.activeItems} items\n                        left\n                        <div>\n                            <button type=\"button\" className={ this.state.filter !== \"all\" ? \"toolbar__btn\" : \"toolbar__btn toolbar__btn--active\"} onClick={() => this.getfiltered('all')}>all</button>\n                            <button type=\"button\" className={ this.state.filter !== \"active\" ? \"toolbar__btn\" : \"toolbar__btn toolbar__btn--active\"} onClick={() => this.getfiltered('active')}>active</button>\n                            <button type=\"button\" className={ this.state.filter !== \"completed\" ? \"toolbar__btn\" : \"toolbar__btn toolbar__btn--active\"} onClick={() => this.getfiltered('completed')}>completed</button>\n                        </div>\n                        <button type=\"button\"\n                                className={this.state.items.length !== this.state.activeItems ? 'display-block toolbar__btn toolbar__btn--border' : 'display-none'}\n                                onClick={this.clearCompleted}>clear completed\n                        </button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}